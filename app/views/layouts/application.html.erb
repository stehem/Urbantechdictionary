<!DOCTYPE html>
<html>
  <head>
    <title>UrbanTechDictionary</title>
    <meta name="description" content="UrbanTechDictionary is the place to read and submit definitions on all things tech-related.">
    <%= stylesheet_link_tag "960_24.css" %>
    <%= stylesheet_link_tag "drop_shadows.css" %>
    <%= stylesheet_link_tag "jquery-ui-1.8.9.custom.css" %>
    <%= stylesheet_link_tag "sexybuttons.css" %>
    <%= stylesheet_link_tag "styles.css" %>
    <link rel="stylesheet" type="text/css" href="http://fonts.googleapis.com/css?family=Droid+Sans">
    <script src="/javascripts/head.min.js" type="text/javascript"></script>

<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-4676001-7']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>

  </head>

  <body>
  <div id="topline0"></div>
  <div id="topline"></div>


  <div id="headwrap" class="drop-shadow curved curved-hz-1">

    <div class="container_24">

      <div id="logo">
        <%= link_to (image_tag "logo3.png"), "#/" %>
      </div>

      <div id="alphabet">
        <% @letters.each do |f| %>
        <%= link_to f, root_path+'#letter/'+f %>
        <% end %>
      </div>

      <div id="new_button">
        <a class="sexybutton sexysimple sexyblue sexyxl" type="reset" href="#definition/new">
          <div id="new_button_txt">New Definition</div>
        </a>
      </div>

    </div>

  </div>


  <div class='clear'></div>


  <div id="bottomwrap">

    <div class="container_24">

      <div class="grid_20 push_2">
        <div id="session">
		        <% if session[:user] %>
			<span class="poster_name"><%= session[:user] %> <%= link_to "logout","#", :id => "logout" %> </span>
			<% else %>
			<span class="poster_name"><%= link_to "login","#definition/new" %> </span>
	                <% end %>
	</div> 

        <div id="twitter">  
<a href="http://twitter.com/share" class="twitter-share-button" data-text="Urban Tech Dictionary" data-count="none">Tweet</a><script type="text/javascript" src="http://platform.twitter.com/widgets.js"></script>
	</div> 


        <div id="random">  
        <%= link_to "Random", "#word/random" %>   
	</div> 
      </div>      

      <div class="grid_18 push_3">

        <div id="main">


          <div id="words_list_hdr">
          </div>   

          <div id="words_list">
          </div>      

          <div id='latest'>
          </div>

          <div id='word_title'>
          </div>

          <ul id="definitions">
          </ul>

          <div id='pagination'>
          </div>

          <div id='new_def'>
          </div>

          <div id='show_def'>
          </div>

          <div id='login_page'>
          </div>

          <div id='about_page'>
          </div>

        </div> <! end of main >

       </div> <! end of grid_19 >

     </div> <! end of container24 >

   </div> <! end of bottomwrap >

   <div class='clear'></div>

   <div id="bottomline"><div id="about_link"><%= link_to "about", "/#about" %></div></div>
   <div id="topline0"></div>




<script>

head.js("https://ajax.googleapis.com/ajax/libs/jquery/1.5.0/jquery.min.js","https://ajax.googleapis.com/ajax/libs/jqueryui/1.8.9/jquery-ui.min.js","http://ajax.cdnjs.com/ajax/libs/underscore.js/1.1.4/underscore-min.js","http://ajax.cdnjs.com/ajax/libs/backbone.js/0.3.3/backbone-min.js","/javascripts/ejs_production.js", "/javascripts/application.js", function(){


$(document).ready(function () {

    $.ajaxSetup ({
    cache: false
    });

    $('.downvote,.upvote').live('click', function(e) {
    e.preventDefault();
    });

    $('#logout').live('click', function() {
     $.post("/logout", function (data) {
      $('#session').html('<div>logged out</div>').fadeOut(5000, function(){
      $(this).html('<span class="poster_name"><a href="#definition/new">login</a> </span>').fadeIn(1500);
      });
      return false;
      });
    });

    $('#random a').click(function(){
      empty_stuff();
      $.get('/word/random',function(data){
      var title = new TitleView({word: data.word});
      var wdefs = new DefinitionStore(data.coll, {word: data.word});
      var pagination = new PaginationView({word: data.word, pagination: data.pagination});
      });
      window.location.hash = '/word/random';
      _gaq.push(['_trackPageview', '/random']);
      return false;
    });
});


var AppController = Backbone.Controller.extend({
routes : {
  "letter/:letter": "word_letter",
  "word/:id": "show_word",
  "vote/:id?v=:vtype": "vote",
  "definition/new": "new_def",
  "definition/:id": "show_def",
  "about": "about",
  "/": "home"
  },

word_letter : function(letter) {
   empty_stuff();
   $.get('/word?letter='+letter, function(data){
      var wview = new WordView2({coll: data.words, letter: letter, pagination: data.pagination});
  });
  _gaq.push(['_trackPageview', '/letter/' + letter]);
  },

show_word: function(id) {
      $('#words_list').html('');
      empty_stuff();
      $('#sidebar').empty();
      var w = $.get("word/"+id, function(data){
      var title = new TitleView({word: data.word});
      wdefs = new DefinitionStore(data.coll, {word: data.word});
      var pagination = new PaginationView({word: data.word, pagination: data.pagination});
      _gaq.push(['_trackPageview', '/word/' + data.word.word]);
    });
  },

new_def: function() {
    var check = $.get("/login", function(data){
    if (data.logged == "true"){
      empty_stuff();
      ndef = new NewDefView;
      _gaq.push(['_trackPageview', '/definition_form']);
    }
    else if (data.logged == "false"){
      empty_stuff();
      $('#login_page').append(new EJS({url: '/javascripts/login.ejs'}).render());
      _gaq.push(['_trackPageview', '/twitter_login']);
    }
    });
  },

show_def: function(id) {
    empty_stuff();
    var d = $.get("definition/"+id, function(data){
      var title = new TitleView({word: data.word});
      sdef = new DefinitionStore(data.definition);
    });
  },

home: function() {
     $.post("/home", function (data) {
        empty_stuff();
           $('#word_title').html('Latest definitions added:');
        _.each(data, function(f){ 
      var definitionz = new DefinitionsView({model: new Definition(f), id: "def_"+f.id, className: "drop-shadow curved curved-vt-2 each_def"});
        });
      });
  _gaq.push(['_trackPageview', '/home']);
  },

about: function() {
    empty_stuff();
    var about = new Aboutview;
  _gaq.push(['_trackPageview', '/about']);
  }


});



var Word = Backbone.Model.extend({});

var Definition = Backbone.Model.extend({
  url: function(){
    if (this.isNew()) {return 'definition'}
    else {return 'definition/'+this.id}
  },
  validate: function(attrs) {
    var result = null;
    if (attrs.upv) {postvote(attrs,"p");}
    else if (attrs.dwv) {postvote(attrs,"n");}
    else if ("word" in attrs && "definition" in attrs) {
        error = {};
        if (attrs.word == ''){error.word = "cannot be empty";}
        if (attrs.definition == ''){error.definition = "cannot be empty";}
        if (attrs.definition.length > 1 && attrs.definition.length < 30){error.definition = "must be at least 30 caracters";}
        if (!_.isEmpty(error)) {return error;} 
    ;}
      function postvote(attrs,vtype){
        $.ajax({
          type: "POST",
          url: '/vote?vtype='+vtype+'&def_id='+attrs.def_id,
          async: false,
          success: function(data){
          result = data.result;
          }
        });
      }        
    if (result) {return "already voted";} 

  }
});

var Vote = Backbone.Model.extend({url: 'vote'});



var DefinitionStore = Backbone.Collection.extend({
  model: Definition,
  initialize: function(models,options) {
   this.word = options.word;
      this.each(function(def) {
      var definition = new DefinitionsView({model: def, id: "def_"+def.id, className: "drop-shadow curved curved-vt-2 each_def"});
      });
    },
});




WordView2 = Backbone.View.extend({
  el: $('#words_list'),
  initialize: function(options) {
  $(this.el).html('');
  this.words = this.options.coll;
  this.letter = this.options.letter;
  this.pagination = this.options.pagination;
  this.render();
    },
  render : function() {
    var self = this;
    $('#words_list_hdr').html('<h1>'+this.letter+'</h1>');
    _.each(this.words, function(word) {
      $(self.el).addClass('drop-shadow curved curved-vt-2').addClass('new_def_bgd');
      $(self.el).append(new EJS({url: '/javascripts/wordlist1.ejs'}).render({word: word.word, id: word.id}));
    });
  $(this.el).append(new EJS({url: '/javascripts/pagination2.ejs'}).render({letter: this.letter, next_page: this.pagination.next_page, previous_page: this.pagination.previous_page}));
    $(self.el).append("<div class='clear'></div>");
   }
});



TitleView = Backbone.View.extend({
  el: $('#word_title'),
  initialize: function(options) {
  this.word = this.options.word;
  this.render();
    },
  render : function() {
  $(this.el).append(new EJS({url: '/javascripts/word.ejs'}).render({word: this.word.word}));
   }
});


DefinitionsView = Backbone.View.extend({
  events: {
    "click .upvote": "upvote",
    "click .downvote": "downvote"
  },
  upvote: function(){
    this.model.set({upv: this.model.get('upv')+1, def_id: this.model.id});
  },
  downvote: function(){
    this.model.set({dwv: this.model.get('dwv')+1, def_id: this.model.id});
  },
    initialize: function(options) {
    _.bindAll(this, 'update');
    this.model.bind('change', this.update);
          this.model.bind("error", function(model, error) {
            var selector = '#def_' + model.get('id');
            $(selector).append('<div id="error_av_'+model.get('id')+'" class="error_av">'+error+'</div>');
            if (!$.browser.msie) {
              $('#error_av_'+model.get('id')).effect("pulsate", { times:2 }, 1000, function(){$(this).fadeOut(1000, function(){$(this).remove();});});
            }           
          });
    this.render();
      },
    render : function() {
    $(this.el).html(new EJS({url: '/javascripts/definition.ejs'}).render({definition: this.model.get('definition'), upv: this.model.get('upv'),dwv: this.model.get('dwv'),poster: this.model.get('poster'),word: this.model.get('word')}));
    $(this.el).appendTo('#definitions');
     },
    update: function(){
    $(this.el).html(new EJS({url: '/javascripts/definition.ejs'}).render({definition: this.model.get('definition'), upv: this.model.get('upv'),dwv: this.model.get('dwv'),poster: this.model.get('poster'),word: this.model.get('word')}));
     }
});


PaginationView = Backbone.View.extend({
  el: $('#pagination'),
  initialize: function(options) {
  this.pagination = this.options.pagination
  this.word = this.options.word;
  this.render();
    },
  render : function() {
  $(this.el).append(new EJS({url: '/javascripts/pagination.ejs'}).render({id: this.word.id, next_page: this.pagination.next_page, previous_page: this.pagination.previous_page}));
   }
});



Aboutview = Backbone.View.extend({
  el: $('#about_page'),
  initialize: function(options) {
  this.render();
    },
  render : function() {
  $(this.el).addClass('drop-shadow raised new_def_bgd');
  $(this.el).append(new EJS({url: '/javascripts/about.ejs'}).render());
  $("html, body").animate({ scrollTop: 0 }, "fast");
  return false;
   }
});



NewDefView = Backbone.View.extend({
  el: $('#new_def'),
  initialize: function(options) {
    this.model = new Definition;
    this.render();
    autocomp();
    this.model.bind("error", function(model,error) {
      if (!_.isUndefined(error.word)){$('#new_def_word').append('<div class="error_av">'+error.word+'</div>');}              
      if (!_.isUndefined(error.definition)){$('#new_def_def').append('<div class="error_av">'+error.definition+'</div>');} 
      if ($('.error_av')) {$('.error_av').effect("pulsate", { times:3 }, 1000, function(){$(this).remove();})}             
    });
  },
  events: {
  "click #new_def_button": "submit"
     },
  submit: function(){
    this.model.save( 
        {word: $('input#def_word').val(),definition: $('textarea#def_def').val() },
        { success: function(model, response){
            window.location.href = "/#definition/"+response.id;
            _gaq.push(['_trackEvent', 'Definition', 'Submitted'])
          } 
        }
      );   
  },
  render : function() {
  $(this.el).append(new EJS({url: '/javascripts/new_def.ejs'}).render());
  $(this.el).addClass('drop-shadow raised new_def_bgd');
   }
});




var utechdictionary = new AppController;
Backbone.history.start();



_.each(<%= raw @latest %>, function(f){ 
  var definitionz = new DefinitionsView({model: new Definition(f), id: "def_"+f.id, className: "drop-shadow curved curved-vt-2 each_def"});
});
$('#word_title').html('Latest definitions added:');


});

</script>





  </body>
</html>

