<!DOCTYPE html>
<html>
  <head>
    <%= stylesheet_link_tag "960_24.css" %>
    <%= stylesheet_link_tag "drop_shadows.css" %>
    <%= stylesheet_link_tag "jquery-ui-1.8.9.custom.css" %>
    <%= stylesheet_link_tag "sexybuttons.css" %>
    <%= stylesheet_link_tag "styles.css" %>
    <link rel="stylesheet" type="text/css" href="http://fonts.googleapis.com/css?family=Droid+Sans">
    <script src="/javascripts/head.min.js" type="text/javascript"></script>
  </head>

  <body>
  <div id="topline0"></div>
  <div id="topline"></div>


  <div id="headwrap" class="drop-shadow curved curved-hz-1">

    <div class="container_24">

      <div id="logo">
        <%= link_to (image_tag "logo3.png"), "#/" %>
      </div>

      <div id="alphabet">
        <% @letters.each do |f| %>
        <%= link_to f, root_path+'#letter/'+f %>
        <% end %>
      </div>

      <div id="new_button">
        <a class="sexybutton sexysimple sexyblue sexyxl" type="reset" href="#definition/new">
          <div id="new_button_txt">New Definition</div>
        </a>
      </div>

    </div>

  </div>


  <div class='clear'></div>


  <div id="bottomwrap">

    <div class="container_24">

      <div class="grid_18 push_3">

        <div id="main">

          <div id="words_list">
          </div>      

          <div id='latest'>
          </div>

          <div id='word_title'>
          </div>

          <ul id="definitions">
          </ul>

          <div id='pagination'>
          </div>

          <div id='new_def'>
          </div>

          <div id='show_def'>
          </div>

          <div id='login_page'>
          </div>

        </div> <! end of main >

       </div> <! end of grid_19 >

     </div> <! end of container24 >

   </div> <! end of bottomwrap >

   <div class='clear'></div>

   <div id="bottomline"></div>
   <div id="topline0"></div>




<script>

head.js("https://ajax.googleapis.com/ajax/libs/jquery/1.5.0/jquery.min.js","https://ajax.googleapis.com/ajax/libs/jqueryui/1.8.9/jquery-ui.min.js","http://ajax.cdnjs.com/ajax/libs/underscore.js/1.1.4/underscore-min.js","http://ajax.cdnjs.com/ajax/libs/backbone.js/0.3.3/backbone-min.js","/javascripts/ejs_production.js", "/javascripts/application.js", function(){


var AppController = Backbone.Controller.extend({
routes : {
  "letter/:letter": "word_letter",
  "word/:id": "show_word",
  "vote/:id?v=:vtype": "vote",
  "definition/new": "new_def",
  "definition/:id": "show_def",
  "session": "logout",
  "/": "home"
  },

word_letter : function(letter) {
   empty_stuff();
   //wbl = new WordStore({ url: "/word?letter="+letter });
   $.get('/word?letter='+letter, function(data){
      var wview = new WordView2({coll: data.words, letter: letter, pagination: data.pagination});
  });
  },

show_word: function(id) {
      $('#words_list').html('');
      empty_stuff();
      $('#sidebar').empty();
      var w = $.get("word/"+id, function(data){
      var title = new TitleView({word: data.word});
      wdefs = new DefinitionStore(data.coll, {word: data.word});
      var pagination = new PaginationView({word: data.word, pagination: data.pagination});
     // _.each(data.words, function(f){ 
      //  var sidebar = new SidebarView({model: f});
     // });
    });
  },

new_def: function() {
    var check = $.get("/login", function(data){
    if (data.logged == "true"){
      empty_stuff();
      ndef = new NewDefView;
    }
    else if (data.logged == "false"){
      empty_stuff();
      $('#login_page').append(new EJS({url: '/javascripts/login.ejs'}).render());
    }
    });
  },

show_def: function(id) {
    empty_stuff();
    var d = $.get("definition/"+id, function(data){
      var title = new TitleView({word: data.word});
      sdef = new DefinitionStore(data.definition);
    });
  },

logout: function() {
     $.post("/logout", function (data) {
      $('#loggedas').empty().hide().html('<div>logged out</div>').fadeIn(1000).fadeOut(3000);
      });
  },

home: function() {
     $.post("/home", function (data) {
        empty_stuff();
           $('#word_title').html('Latest definitions added');
        _.each(data, function(f){ 
      var definitionz = new DefinitionsView({model: new Definition(f), id: "def_"+f.id, className: "drop-shadow curved curved-vt-2 each_def"});
        });
      });

  }

});



var Word = Backbone.Model.extend({});

var Definition = Backbone.Model.extend({
  url: function(){
    if (this.isNew()) {return 'definition'}
    else {return 'definition/'+this.id}
  },
  validate: function(attrs) {
    var result = null;
    if (attrs.upv) {postvote(attrs,"p");}
    else if (attrs.dwv) {postvote(attrs,"n");}
    else if ("word" in attrs && "definition" in attrs) {
        error = {};
        if (attrs.word == ''){error.word = "payes ton word";}
        if (attrs.definition == ''){error.definition = "payes ta def";}
        if (!_.isEmpty(error)) {return error;} 
    ;}
      function postvote(attrs,vtype){
        $.ajax({
          type: "POST",
          url: '/vote?vtype='+vtype+'&def_id='+attrs.def_id,
          async: false,
          success: function(data){
          result = data.result;
          }
        });
      }        
    if (result) {return "already voted";} 

  }
});

var Vote = Backbone.Model.extend({url: 'vote'});



var DefinitionStore = Backbone.Collection.extend({
  model: Definition,
  initialize: function(models,options) {
   this.word = options.word;
      this.each(function(def) {
      var definition = new DefinitionsView({model: def, id: "def_"+def.id, className: "drop-shadow curved curved-vt-2 each_def"});
      });
    },
});




WordView2 = Backbone.View.extend({
  el: $('#words_list'),
  initialize: function(options) {
  $(this.el).html('');
  this.words = this.options.coll;
  this.letter = this.options.letter;
  this.pagination = this.options.pagination;
  this.render();
    },
  render : function() {
    var self = this;
    _.each(this.words, function(word) {
      $(self.el).addClass('drop-shadow curved curved-hz-1').addClass('new_def_bgd');
      $(self.el).append(new EJS({url: '/javascripts/wordlist1.ejs'}).render({word: word.word, id: word.id}));
    });
  $(this.el).append(new EJS({url: '/javascripts/pagination2.ejs'}).render({letter: this.letter, next_page: this.pagination.next_page, previous_page: this.pagination.previous_page}));
    $(self.el).append("<div class='clear'></div>");
   }
});



TitleView = Backbone.View.extend({
  el: $('#word_title'),
  initialize: function(options) {
  this.word = this.options.word;
  this.render();
    },
  render : function() {
  $(this.el).append(new EJS({url: '/javascripts/word.ejs'}).render({word: this.word.word}));
   }
});


DefinitionsView = Backbone.View.extend({
  events: {
    "click .upvote": "upvote",
    "click .downvote": "downvote"
  },
  upvote: function(){
    this.model.set({upv: this.model.get('upv')+1, def_id: this.model.id});
  },
  downvote: function(){
    this.model.set({dwv: this.model.get('dwv')+1, def_id: this.model.id});
  },
    initialize: function(options) {
    _.bindAll(this, 'update');
    this.model.bind('change', this.update);
          this.model.bind("error", function(model, error) {
            var selector = '#def_' + model.get('id');
            $(selector).append('<div id="error_av_'+model.get('id')+'" class="error_av">'+error+'</div>');
          });
    this.render();
      },
    render : function() {
    $(this.el).html(new EJS({url: '/javascripts/definition.ejs'}).render({definition: this.model.get('definition'), upv: this.model.get('upv'),dwv: this.model.get('dwv'),poster: this.model.get('poster'),word: this.model.get('word')}));
    $(this.el).appendTo('#definitions');
     },
    update: function(){
    $(this.el).html(new EJS({url: '/javascripts/definition.ejs'}).render({definition: this.model.get('definition'), upv: this.model.get('upv'),dwv: this.model.get('dwv'),poster: this.model.get('poster'),word: this.model.get('word')}));
     }
});


PaginationView = Backbone.View.extend({
  el: $('#pagination'),
  initialize: function(options) {
  this.pagination = this.options.pagination
  this.word = this.options.word;
  this.render();
    },
  render : function() {
  $(this.el).append(new EJS({url: '/javascripts/pagination.ejs'}).render({id: this.word.id, next_page: this.pagination.next_page, previous_page: this.pagination.previous_page}));
   }
});



SidebarView = Backbone.View.extend({
  el: $('#sidebar'),
  initialize: function(options) {
  this.render();
    },
  render : function() {
  $(this.el).append(new EJS({url: '/javascripts/sidebar.ejs'}).render({word_sl: this.model.word, word_sl_id: this.model.id}));
   }
});



NewDefView = Backbone.View.extend({
  el: $('#new_def'),
  initialize: function(options) {
    this.model = new Definition;
    this.render();
    autocomp();
    this.model.bind("error", function(model,error) {
      if (!_.isUndefined(error.word)){$('#new_def_word').append('<div>'+error.word+'</div>');}              
      if (!_.isUndefined(error.definition)){$('#new_def_def').append('<div>'+error.definition+'</div>');}              
    });
  },
  events: {
  "click #new_def_button": "submit"
     },
  submit: function(){
    this.model.save( 
        {word: $('input#def_word').val(),definition: $('textarea#def_def').val() },
        { success: function(model, response){
            window.location.href = "/#definition/"+response.id;
          } 
        }
      );   
  },
  render : function() {
  $(this.el).append(new EJS({url: '/javascripts/new_def.ejs'}).render());
  $(this.el).addClass('drop-shadow raised new_def_bgd');
   }
});




var yC = new AppController;
Backbone.history.start();



_.each(<%= raw @latest %>, function(f){ 
  var definitionz = new DefinitionsView({model: new Definition(f), id: "def_"+f.id, className: "drop-shadow curved curved-vt-2 each_def"});
});
$('#word_title').html('Latest definitions added');


});

  </script>




  </body>
</html>

